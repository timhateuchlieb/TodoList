{"version":3,"file":"todo-list.js","sourceRoot":"","sources":["../../../../src/components/TodoList/todo list/todo-list.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Element, h, State } from '@stencil/core';\nimport { Task } from './task';\nimport { Unsubscribe } from 'redux';\nimport store from '../../../reduxStore/store/store';\nimport { addTodo, toggleTodo, toggleDarkMode, updateAccordingToLocalStorage } from '../../../reduxStore/actions/actions';\nimport { selectAllTodos, selectDarkModeState, selectNewTaskText } from '../../../selectors/selectorSelector';\n\n@Component({\n  tag: 'todo-list',\n  styleUrl: 'todo-list.css',\n  shadow: true,\n})\nexport class TodoList {\n  @State() tasks: Task[] = [];\n  @State() darkMode: boolean = false;\n  @State() newTaskText: string = '';\n\n  @Element() hostElement: HTMLElement;\n\n  private unsubscribe: Unsubscribe = null;\n\n  componentWillLoad() {\n    store.dispatch(updateAccordingToLocalStorage());\n    this.syncWithStore();\n    this.unsubscribe = store.subscribe(() => {\n      this.syncWithStore();\n    });\n  }\n\n  syncWithStore() {\n    const newTasks = selectAllTodos();\n    const newDarkMode = selectDarkModeState();\n    const newTaskText = selectNewTaskText();\n\n    if (this.tasks !== newTasks) {\n      this.tasks = newTasks;\n    }\n    if (this.darkMode !== newDarkMode) {\n      this.darkMode = newDarkMode;\n    }\n    if (this.newTaskText !== newTaskText) {\n      this.newTaskText = newTaskText;\n    }\n  }\n\n  toggleDarkMode() {\n    let newDarkModeState: boolean = !this.darkMode;\n    store.dispatch(toggleDarkMode(newDarkModeState));\n  }\n\n  disconnectedCallback() {\n    if (this.unsubscribe) {\n      this.unsubscribe();\n    }\n  }\n\n  handleFormSubmit(event: Event) {\n    event.preventDefault();\n    if (this.newTaskText.trim()) {\n      const task = new Task(this.newTaskText);\n      store.dispatch(addTodo(task));\n    }\n  }\n\n  handleTaskUpdated(event: CustomEvent<Task>) {\n    const updatedTask = event.detail;\n    store.dispatch(toggleTodo(updatedTask));\n  }\n\n  handleInputChange(event: Event) {\n    const target = event.target as HTMLInputElement;\n    store.dispatch({ type: 'UPDATE_NEW_TASK_TEXT', payload: target.value });\n  }\n\n  render() {\n    return (\n      <div class={this.darkMode ? 'dark' : 'light'}>\n        <button onClick={() => this.toggleDarkMode()}>\n          {this.darkMode ? 'Light Mode' : 'Dark Mode'}\n        </button>\n        <h1>To-Do List</h1>\n        <p>Tasks left: {this.tasks.filter(task => !task.isChecked).length}</p>\n        <form onSubmit={(event) => this.handleFormSubmit(event)}>\n          <input\n            type=\"text\"\n            value={this.newTaskText}\n            onInput={(event) => this.handleInputChange(event)}\n            placeholder=\"Add a new task\"\n            required\n          />\n          <button type=\"submit\">Add</button>\n        </form>\n        <ul>\n          {this.tasks.map(task => (\n            <todo-item task={task} onTodoCompleted={(event) => this.handleTaskUpdated(event)}></todo-item>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n"]}